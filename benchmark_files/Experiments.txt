The final result gives a boolean value as to whether the given property is satisfied by the MDP, and a counterexample or a witness, if possible,
by printing the action taken at each state of the mdp to give a dtmc. In the result a_i refers to the action taken in the ith state.


The following are the details of the experiments as mentioned in the paper:

1) TA: Timing attack experiment, explained as the first case study in the paper. The following refer to the arguments used for 3 different trials with m ={2,4,6}

   python source.py benchmark_files/mdp/TA/timing_attack2.nm "AS sh . A s1 . A s2 . ~((start0(s1) & start1(s2)) & ~(R s1 (F end(s1)) = R s2 (F end(s2))))"
   python source.py benchmark_files/mdp/TA/timing_attack4.nm "AS sh . A s1 . A s2 . ~((start0(s1) & start1(s2)) & ~(R s1 (F end(s1)) = R s2 (F end(s2))))"
   python source.py benchmark_files/mdp/TA/timing_attack6.nm "AS sh . A s1 . A s2 . ~((start0(s1) & start1(s2)) & ~(R s1 (F end(s1)) = R s2 (F end(s2))))"
   python source.py benchmark_files/mdp/TA/timing_attack8.nm "AS sh . A s1 . A s2 . ~((start0(s1) & start1(s2)) & ~(R s1 (F end(s1)) = R s2 (F end(s2))))"

2) PC: Probabilistic conformance, explained as the second case study in the paper. The cases include the cases where we allow all possible non-deterministic choice for state 0 of the of the first coin and allow all possible non-deterministic choice for state 0 of the of the first coin along with state 0 of the second coin.

   python source.py benchmark_files/mdp/PC/synthesis0.nm "ES sh . A s1 . E s2 . ~(start1(s1) & ~( start2(s2) & ((P(F die1(s1)) = P(F die1(s2))) & ((P(F die2(s1)) = P(F die2(s2))) & ((P(F die3(s1)) = P(F die3(s2))) & ((P(F die4(s1)) = P(F die4(s2))) & ((P(F die5(s1)) = P(F die5(s2))) & ((P(F die6(s1)) = P(F die6(s2))) & (R s2 (F final(s2)) < 4) ) ) ) ) ) ) ) )"
   python source.py benchmark_files/mdp/PC/synthesis0_1.nm "ES sh . A s1 . E s2 . ~(start1(s1) & ~( start2(s2) & ((P(F die1(s1)) = P(F die1(s2))) & ((P(F die2(s1)) = P(F die2(s2))) & ((P(F die3(s1)) = P(F die3(s2))) & ((P(F die4(s1)) = P(F die4(s2))) & ((P(F die5(s1)) = P(F die5(s2))) & ((P(F die6(s1)) = P(F die6(s2))) & (R s2 (F final(s2)) < 4) ) ) ) ) ) ) ) )"
   python source.py benchmark_files/mdp/PC/synthesis0_1_2.nm "ES sh . A s1 . E s2 . ~(start1(s1) & ~( start2(s2) & ((P(F die1(s1)) = P(F die1(s2))) & ((P(F die2(s1)) = P(F die2(s2))) & ((P(F die3(s1)) = P(F die3(s2))) & ((P(F die4(s1)) = P(F die4(s2))) & ((P(F die5(s1)) = P(F die5(s2))) & ((P(F die6(s1)) = P(F die6(s2))) & (R s2 (F final(s2)) < 4) ) ) ) ) ) ) ) )"
   python source.py benchmark_files/mdp/PC/synthesis0_1_2_3.nm "ES sh . A s1 . E s2 . ~(start1(s1) & ~( start2(s2) & ((P(F die1(s1)) = P(F die1(s2))) & ((P(F die2(s1)) = P(F die2(s2))) & ((P(F die3(s1)) = P(F die3(s2))) & ((P(F die4(s1)) = P(F die4(s2))) & ((P(F die5(s1)) = P(F die5(s2))) & ((P(F die6(s1)) = P(F die6(s2))) & (R s2 (F final(s2)) < 4) ) ) ) ) ) ) ) )"
   python source.py benchmark_files/mdp/PC/synthesis0_1_2_3_4.nm "ES sh . A s1 . E s2 . ~(start1(s1) & ~( start2(s2) & ((P(F die1(s1)) = P(F die1(s2))) & ((P(F die2(s1)) = P(F die2(s2))) & ((P(F die3(s1)) = P(F die3(s2))) & ((P(F die4(s1)) = P(F die4(s2))) & ((P(F die5(s1)) = P(F die5(s2))) & ((P(F die6(s1)) = P(F die6(s2))) & (R s2 (F final(s2)) < 4) ) ) ) ) ) ) ) )"
   python source.py benchmark_files/mdp/PC/synthesis0_1_2_3_4_5.nm "ES sh . A s1 . E s2 . ~(start1(s1) & ~( start2(s2) & ((P(F die1(s1)) = P(F die1(s2))) & ((P(F die2(s1)) = P(F die2(s2))) & ((P(F die3(s1)) = P(F die3(s2))) & ((P(F die4(s1)) = P(F die4(s2))) & ((P(F die5(s1)) = P(F die5(s2))) & ((P(F die6(s1)) = P(F die6(s2))) & (R s2 (F final(s2)) < 4) ) ) ) ) ) ) ) )"
   python source.py benchmark_files/mdp/PC/synthesis0_1_2_3_4_5_6.nm "ES sh . A s1 . E s2 . ~(start1(s1) & ~( start2(s2) & ((P(F die1(s1)) = P(F die1(s2))) & ((P(F die2(s1)) = P(F die2(s2))) & ((P(F die3(s1)) = P(F die3(s2))) & ((P(F die4(s1)) = P(F die4(s2))) & ((P(F die5(s1)) = P(F die5(s2))) & ((P(F die6(s1)) = P(F die6(s2))) & (R s2 (F final(s2)) < 4) ) ) ) ) ) ) ) )"
